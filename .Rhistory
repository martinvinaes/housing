setwd("~/GitHub/housing")
require(dplyr)
require(magrittr)
require(ggmap)
require(httr)
require(rjson)
require(readr)
require(readxl)
require(ggplot2)
require(stargazer)
#read in election locations data
allaf<-read_csv("data/valgstedsdata/elecresults_utf8.csv")
#get names and polling place id's for all 2015 locations
af15<-allaf %>%
filter(year==2015) %>%
select(valgstedid,vsnavn,kredsnavn) %>%
filter(vsnavn!="") %>% #remove empty names
as.data.frame()
#get address string to send to google
af15$adrstring<-paste(gsub("[0-9].","",af15[,2]),gsub("[0-9].","",af15[,3]),"Denmark",sep=", ") %>%
gsub("\\.","",.) %>%
gsub("Kreds, ","",.)
#get approximate lon/lat coordinates for polling places by calling the Google Maps API
af15$lon<-NA
af15$lat<-NA
for (i in 1:nrow(af15)){
gci<-geocode(af15$adrstring[i])
af15$lon[i]<-gci$lon
af15$lat[i]<-gci$lat
}
saveRDS(af15,file="data/af15_2.rds")
af15<-readRDS(file="data/af15_2.rds")
#throw out misplaced longitude
af15$lon[af15$lon<0]<-NA
#get nearest full adress by using the lon/lats to call the AWS API
af15$zip<-NA
af15$muninum<-NA
for (i in 1:nrow(af15)){
if(!is.na(af15$lon[i])){
apireturn<-paste("http://dawa.aws.dk/adgangsadresser/reverse?x=",af15$lon[i],"&y=",af15$lat[i],sep="") %>%
parse_url() %>%
GET() %>%
content(.,as="text",encoding="UTF-8") %>%
fromJSON()
af15$zip[i]<-as.numeric(apireturn$postnummer$nr)
af15$muninum[i]<-as.numeric(apireturn$kommune$kode)
}
}
saveRDS(af15,file="data/af15_3.rds")
af15<-readRDS("data/af15_3.rds")
af15<-readRDS("data/af15_3.rds")
write.csv(af15,"data/lonlat.csv")
#read in zip prices data
zipprices<-read_delim("data/zipprices.csv",delim=";")
#set missing prices to NA
zipprices$t2[zipprices$t2==0]<-NA
zipprices$t1[zipprices$t1==0]<-NA
zipprices$t[zipprices$t==0]<-NA
#number of trades
ziptrades<-read_delim("data/ziptrades.csv",delim=";")
#get zip prices weighted by trade frequency
uzips<-data.frame(zipy=unique(zipprices$zipy))
uzips$hp_1yr<-NA
uzips$hp_2yr<-NA
housing
setwd("~/GitHub/housing")
allaf<-read_csv("data/valgstedsdata/elecresults_utf8.csv")
#get names and polling place id's for all 2015 locations
af15<-allaf %>%
filter(year==2015) %>%
select(valgstedid,vsnavn,kredsnavn) %>%
filter(vsnavn!="") %>% #remove empty names
as.data.frame()
allaf<-read_csv("data/valgstedsdata/elecresults_utf8.csv")
require(dplyr)
require(magrittr)
require(ggmap)
require(httr)
require(rjson)
require(readr)
require(readxl)
require(ggplot2)
require(stargazer
af15<-readRDS("data/af15_3.rds")
}
hello
af15<-readRDS("data/af15_3.rds")
